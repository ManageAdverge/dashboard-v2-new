generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String               @id @default(cuid())
  name          String?
  email         String?              @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role                 @default(USER)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  accounts      Account[]
  invitations   Invitation[]
  resetTokens   PasswordResetToken[]
  sessions      Session[]
  todos         Todo[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Todo {
  id        String   @id @default(cuid())
  title     String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invitation {
  id        String           @id @default(cuid())
  email     String
  token     String           @unique
  role      Role             @default(USER)
  status    InvitationStatus @default(PENDING)
  expiresAt DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    String?
  user      User?            @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model GlobalSettings {
  id                         String   @id @default("global")
  googleAdsAccountIds        String[]
  selectedGoogleAdsAccountId String[]
  microsoftAdsAccountIds     String[]
  selectedMicrosoftAdsAccountId String[]
  targetFocus                String   @default("conversion")
  conversionTarget           Float?
  cpaTarget                  Float?
  conversionValueTarget      Float?
  roasTarget                 Float?
  currency                   String   @default("USD")
  clientName                 String?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
}

model GlobalBudget {
  id        String   @id @default(cuid())
  type      String
  month     String
  value     Float
  currency  String   @default("USD")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([type, month])
}

enum Role {
  USER
  ADMIN
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}
